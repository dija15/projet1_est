sudo systemctl start cassandra
sudo systemctl status cassandra

## si ne fonctionne pas red√©marrer cassandra :
sudo systemctl restart cassandra ##

cqlsh

## arr√™ter cassandra :
sudo systemctl stop cassandra  ##
------------------------------------------------------------
Starting listening for CQL clients on /0.0.0.0:9042
 sudo docker exec -it cassandra-db cqlsh

-----------------------------------------------------
CREATE KEYSPACE projet_est
 use projet_est;


-------------------------------------------------
cqlsh:projet_est> CREATE TABLE utilisateurs (
              ...    id UUID PRIMARY KEY,
              ...    nom TEXT,
              ...    email TEXT,
              ...    role TEXT,
              ...    mot_de_pass TEXT,
              ...    date_inscription TIMESTAMP
              ... );
cqlsh:projet_est> CREATE TABLE cours (
              ...     id UUID PRIMARY KEY,
              ...     titre TEXT,
              ...     description TEXT,
              ...     enseignant_id UUID,
              ...     date_creation TIMESTAMP
              ... );
cqlsh:projet_est> CREATE TABLE inscriptions (
              ...     id UUID PRIMARY KEY,
              ...     utilisateur_id UUID,
              ...     cours_id UUID,
              ...     date_inscription TIMESTAMP
              ... );
cqlsh:projet_est>
cqlsh:projet_est> cqlsh:projet_est>
              ...
              ...
cqlsh:projet_est> CREATE TABLE fichiers (
              ...     id UUID PRIMARY KEY,
              ...     nom TEXT,
              ...     url TEXT,
              ...     cours_id UUID,
              ...     date_upload TIMESTAMP
              ... );
cqlsh:projet_est> CREATE TABLE messages (
              ...     id UUID PRIMARY KEY,
              ...     contenu TEXT,
              ...     utilisateur_id UUID,
              ...     cours_id UUID,
              ...     date_envoi TIMESTAMP
              ... );
cqlsh:projet_est> CREATE TABLE examens (
              ...     id UUID PRIMARY KEY,
              ...     titre TEXT,
              ...     cours_id UUID,
              ...     date_examen TIMESTAMP,
              ...     fichier_id UUID
              ... );
cqlsh:projet_est> CREATE TABLE devoirs (
              ...     id UUID PRIMARY KEY,
              ...     titre TEXT,
              ...     description TEXT,
              ...     cours_id UUID,
              ...     date_creation TIMESTAMP,
              ...     date_limite TIMESTAMP
              ... );
---------------------------------------




Voici une version mise √† jour de votre mod√®le, avec les deux derni√®res tables supprim√©es (**Notifications** et **Soumissions**) et une nouvelle table **Devoirs** ajout√©e.

---

### **üìö Tables Principales du Mod√®le de Base de Donn√©es (Mise √† Jour)**

#### **1. Utilisateurs**
```sql
CREATE TABLE utilisateurs (
    id UUID PRIMARY KEY,                -- Identifiant unique
    nom TEXT,                           -- Nom complet
    email TEXT UNIQUE,                  -- Adresse email unique
    role TEXT,                          -- R√¥le (√©tudiant, enseignant, admin)
    mot_de_passe_hash TEXT,             -- Mot de passe hach√©
    date_inscription TIMESTAMP          -- Date d'inscription
);
```

#### **2. Cours**
```sql
CREATE TABLE cours (
    id UUID PRIMARY KEY,                
    titre TEXT,                         
    description TEXT,                   
    enseignant_id UUID,                 
    date_creation TIMESTAMP             
);
```

#### **3. Inscriptions**
```sql
CREATE TABLE inscriptions (
    id UUID PRIMARY KEY,               
    utilisateur_id UUID,               
    cours_id UUID,                      
    date_inscription TIMESTAMP          
);
```

#### **4. Fichiers**
```sql
CREATE TABLE fichiers (
    id UUID PRIMARY KEY,                
    nom TEXT,                          
    url TEXT,                           
    cours_id UUID,                      
    date_upload TIMESTAMP              
);
```


#### **5. Messages (Forum ou Chat)**
```sql
CREATE TABLE messages (
    id UUID PRIMARY KEY,                
    contenu TEXT,                       
    utilisateur_id UUID,                
    cours_id UUID,                      
    date_envoi TIMESTAMP                
);
```

#### **7. Examen**
CREATE TABLE examens (
    id UUID PRIMARY KEY,              
    titre TEXT,                       
    cours_id UUID,                    
    date_examen TIMESTAMP,            
    fichier_id UUID                   
);


```

#### **6. Devoirs**
Pour g√©rer les devoirs assign√©s aux √©tudiants dans un cours.  
```sql
CREATE TABLE devoirs (
    id UUID PRIMARY KEY,               
    titre TEXT,                         
    description TEXT,                   
    cours_id UUID,                      
    date_creation TIMESTAMP,           
    date_limite TIMESTAMP               
);
```

---

### **Relations Entre les Tables (Mise √† Jour)**

- Les **Utilisateurs** peuvent √™tre des enseignants ou des √©tudiants.
- Les **Cours** sont associ√©s √† un enseignant et peuvent avoir plusieurs √©tudiants via les **Inscriptions**.
- Les **Devoirs** sont li√©s √† un **Cours**.
- Les **Messages** permettent une interaction entre les utilisateurs dans un cours.
- Les **Fichiers** sont attach√©s √† un **Cours** (documents partag√©s, contenus p√©dagogiques, etc.).

---

### **Exemple de Requ√™tes**
1. **Lister les devoirs d‚Äôun cours** :
   ```sql
   SELECT titre, description, date_limite 
   FROM devoirs
   WHERE cours_id = '<id_cours>';
   ```

2. **Lister les cours auxquels un √©tudiant est inscrit** :
   ```sql
   SELECT c.titre, c.description 
   FROM cours c
   JOIN inscriptions i ON c.id = i.cours_id
   WHERE i.utilisateur_id = '<id_etudiant>';
   ```

3. **Lister les fichiers associ√©s √† un cours** :
   ```sql
   SELECT nom, url 
   FROM fichiers
   WHERE cours_id = '<id_cours>';
   ```

---

Cette version simplifi√©e refl√®te vos besoins. Si vous voulez des ajustements suppl√©mentaires, je suis l√† ! üòä